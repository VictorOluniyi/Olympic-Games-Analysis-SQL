SELECT *
FROM olympic_history

SELECT *
FROM olympic_history_noc_regions

1. How many olympic games have been held?

SELECT count(distinct games)
FROM olympic_history;

2. List all the games held so far

SELECT distinct games, year, city
FROM olympic_history
ORDER BY games;

3. Mention the total number of nations who participated in each olympic games?

with all_countries as
        (select games, nr.region
        from olympic_history oh
        join olympic_history_noc_regions nr ON nr.noc = oh.noc
        group by games, nr.region)
    select games, count(1) as total_countries
    from all_countries
    group by games
    order by games;

4. Which year saw the highest and lowest number of countries participating in olympics?

 Which year saw the highest and lowest no of countries participating in olympics

      with all_countries as
              (select games, nr.region
              from olympic_history oh
              join olympic_history_noc_regions nr ON nr.noc=oh.noc
              group by games, nr.region),
          tot_countries as
              (select games, count(1) as total_countries
              from all_countries
              group by games)
      select distinct
      concat(first_value(games) over(order by total_countries)
      , ' - '
      , first_value(total_countries) over(order by total_countries)) as Lowest_Countries,
      concat(first_value(games) over(order by total_countries desc)
      , ' - '
      , first_value(total_countries) over(order by total_countries desc)) as Highest_Countries
      from tot_countries
      order by 1;

5. Which nation has participated in all olympics games

      with tot_games as
              (select count(distinct games) as total_games
              from olympic_history),
          countries as
              (select games, nr.region as country
              from olympic_history oh
              join olympic_history_noc_regions nr ON nr.noc=oh.noc
              group by games, nr.region),
          countries_participated as
              (select country, count(1) as total_participated_games
              from countries
              group by country)
      select cp.*
      from countries_participated cp
      join tot_games tg on tg.total_games = cp.total_participated_games
      order by 1;

6. Identify the sport which was played in all summer olympics

with t1 as
          	(select count(distinct games) as total_games
          	from olympics_history where season = 'Summer'),
          t2 as
          	(select distinct games, sport
          	from olympic_history where season = 'Summer'),
          t3 as
          	(select sport, count(1) as no_of_games
          	from t2
          	group by sport)
      select *
      from t3
      join t1 on t1.total_games = t3.no_of_games;

7. Which sports were just played once in the olympic?

with t1 as
          	(select distinct games, sport
          	from olympic_history),
          t2 as
          	(select sport, count(1) as no_of_games
          	from t1
          	group by sport)
      select t2.*, t1.games
      from t2
      join t1 on t1.sport = t2.sport
      where t2.no_of_games = 1
      order by t1.sport;

8. Fetch the total number of sports played in each olympic games

with t1 as
      	(select distinct games, sport
      	from olympic_history),
        t2 as
      	(select games, count(1) as no_of_sports
      	from t1
      	group by games)
      select * from t2
      order by no_of_sports desc;

9. Fetch the detaiil of oldest althlete to win a gold medal

SELECT name, age
FROM olympic_history
WHERE medal = 'Gold' AND age <> 'NA'
ORDER BY age DESC
LIMIT 2;

with t1 as
      	(select distinct games, sport
      	from olympic_history),
        t2 as
      	(select games, count(1) as no_of_sports
      	from t1
      	group by games)
      select * from t2
      order by no_of_sports desc;

10. Find the ratio of male and female athletes participated in all olympics games

with t1 as
        	(select sex, count(1) as cnt
        	from olympics_history
        	group by sex),
        t2 as
        	(select *, row_number() over(order by cnt) as rn
        	 from t1),
        min_cnt as
        	(select cnt from t2	where rn = 1),
        max_cnt as
        	(select cnt from t2	where rn = 2)
    select concat('1 : ', round(max_cnt.cnt::decimal/min_cnt.cnt, 2)) as ratio
    from min_cnt, max_cnt;
	
11. Fetch the top 5 athletes who have won the most gold medals

SELECT name, count(medal) as "Number of medals"
FROM olympic_history
WHERE medal = 'Gold'
GROUP BY name
ORDER BY count(medal) DESC
LIMIT 5

OR

with t1 as
	(SELECT name, count(1) as "total_medals"
	FROM olympic_history
	WHERE medal = 'Gold'
	GROUP BY name
	ORDER BY count(1) DESC),
t2 as
	(SELECT *, dense_rank() over(ORDER BY total_medals DESC) as rnk
	FROM t1)
SELECT *
FROM t2
WHERE rnk <= 5
	
12. Fetch the top 5 athletes who have won the most medals (gold/Silver/Bronze)

SELECT name, count(medal) as "Number of medals"
FROM olympic_history
GROUP BY name
ORDER BY count(medal) DESC
LIMIT 5

OR

with t1 as
            (select name, team, count(1) as total_medals
            from olympic_history
            where medal in ('Gold', 'Silver', 'Bronze')
            group by name, team
            order by total_medals desc),
        t2 as
            (select *, dense_rank() over (order by total_medals desc) as rnk
            from t1)
    select name, team, total_medals
    from t2
    where rnk <= 5;


13. Fetch the top 5 most successful countries in olympics. Success is defined by no of medals won

with t1 as
            (select nr.region, count(1) as total_medals
            from olympics_history oh
            join olympics_history_noc_regions nr on nr.noc = oh.noc
            where medal <> 'NA'
            group by nr.region
            order by total_medals desc),
        t2 as
            (select *, dense_rank() over(order by total_medals desc) as rnk
            from t1)
    select *
    from t2
    where rnk <= 5;
	
-- PIVOT
In Postgresql, we can use crosstab function to create pivot table.
crosstab function is part of a PostgreSQL extension called tablefunc.
To call the crosstab function, you must first enable the tablefunc extension by executing the following SQL command:

14. List down total gold, silver and bronze metals won by each country

SELECT nr.region as Country, medal, count(1) as Total_medals
FROM olympic_history oh
JOIN olympic_history_noc_regions nr
	ON oh.noc = nr.noc
WHERE medal <> 'NA'
GROUP BY nr.region, medal
ORDER BY nr.region, medal

CREATE extension tablefunc;

SELECT country
,	coalesce(gold, 0) as gold
,	coalesce(silver, 0) as silver
,	coalesce(bronze, 0) as bronze
FROM CROSSTAB('SELECT nr.region as Country, medal, count(1) as Total_medals
				FROM olympic_history oh
				JOIN olympic_history_noc_regions nr
					ON oh.noc = nr.noc
				WHERE medal <> ''NA''
				GROUP BY nr.region, medal
				ORDER BY nr.region, medal'),
				'values (''Bronze''), (''Gold''), (''Silver'')')
		as result(country varchar, bronze bigint, gold bigint, silver bigint)
OR

SELECT country
    	, coalesce(gold, 0) as gold
    	, coalesce(silver, 0) as silver
    	, coalesce(bronze, 0) as bronze
    FROM CROSSTAB('SELECT nr.region as country
    			, medal
    			, count(1) as total_medals
    			FROM olympic_history oh
    			JOIN olympic_history_noc_regions nr ON nr.noc = oh.noc
    			where medal <> ''NA''
    			GROUP BY nr.region,medal
    			order BY nr.region,medal',
            'values (''Bronze''), (''Gold''), (''Silver'')')
    AS FINAL_RESULT(country varchar, bronze bigint, gold bigint, silver bigint)
    order by gold desc, silver desc, bronze desc;

15. List down total gold, silver and bronze medal won by each countries corresponding to each olympic games
SELECT substring(games,1,position(' - ' in games) - 1) as games
        , substring(games,position(' - ' in games) + 3) as country
        , coalesce(gold, 0) as gold
        , coalesce(silver, 0) as silver
        , coalesce(bronze, 0) as bronze
    FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
                , medal
                , count(1) as total_medals
                FROM olympic_history oh
                JOIN olympic_history_noc_regions nr ON nr.noc = oh.noc
                where medal <> ''NA''
                GROUP BY games,nr.region,medal
                order BY games,medal',
            'values (''Bronze''), (''Gold''), (''Silver'')')
    AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint);
 

16. Identify which country won the most gold, most silver and most bronze medals in each olympic games

    WITH temp as
    	(SELECT substring(games, 1, position(' - ' in games) - 1) as games
    	 	, substring(games, position(' - ' in games) + 3) as country
            , coalesce(gold, 0) as gold
            , coalesce(silver, 0) as silver
            , coalesce(bronze, 0) as bronze
    	FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
    					, medal
    				  	, count(1) as total_medals
    				  FROM olympic_history oh
    				  JOIN olympic_history_noc_regions nr ON nr.noc = oh.noc
    				  where medal <> ''NA''
    				  GROUP BY games,nr.region,medal
    				  order BY games,medal',
                  'values (''Bronze''), (''Gold''), (''Silver'')')
    			   AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint))
    select distinct games
    	, concat(first_value(country) over(partition by games order by gold desc)
    			, ' - '
    			, first_value(gold) over(partition by games order by gold desc)) as Max_Gold
    	, concat(first_value(country) over(partition by games order by silver desc)
    			, ' - '
    			, first_value(silver) over(partition by games order by silver desc)) as Max_Silver
    	, concat(first_value(country) over(partition by games order by bronze desc)
    			, ' - '
    			, first_value(bronze) over(partition by games order by bronze desc)) as Max_Bronze
    from temp
    order by games;
	
17. Identify which country won the most gold, most silver, most bronze medals and the most medals in each olympic games

 with temp as
    	(SELECT substring(games, 1, position(' - ' in games) - 1) as games
    		, substring(games, position(' - ' in games) + 3) as country
    		, coalesce(gold, 0) as gold
    		, coalesce(silver, 0) as silver
    		, coalesce(bronze, 0) as bronze
    	FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
    					, medal
    					, count(1) as total_medals
    				  FROM olympics_history oh
    				  JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    				  where medal <> ''NA''
    				  GROUP BY games,nr.region,medal
    				  order BY games,medal',
                  'values (''Bronze''), (''Gold''), (''Silver'')')
    			   AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint)),
    	tot_medals as
    		(SELECT games, nr.region as country, count(1) as total_medals
    		FROM olympics_history oh
    		JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    		where medal <> 'NA'
    		GROUP BY games,nr.region order BY 1, 2)
    select distinct t.games
    	, concat(first_value(t.country) over(partition by t.games order by gold desc)
    			, ' - '
    			, first_value(t.gold) over(partition by t.games order by gold desc)) as Max_Gold
    	, concat(first_value(t.country) over(partition by t.games order by silver desc)
    			, ' - '
    			, first_value(t.silver) over(partition by t.games order by silver desc)) as Max_Silver
    	, concat(first_value(t.country) over(partition by t.games order by bronze desc)
    			, ' - '
    			, first_value(t.bronze) over(partition by t.games order by bronze desc)) as Max_Bronze
    	, concat(first_value(tm.country) over (partition by tm.games order by total_medals desc nulls last)
    			, ' - '
    			, first_value(tm.total_medals) over(partition by tm.games order by total_medals desc nulls last)) as Max_Medals
    FROM temp t
    JOIN tot_medals tm on tm.games = t.games AND tm.country = t.country
    ORDER BY games;

18. Which countries have never won gold medal but have won silver/bronze medals?

SELECT * FROM (
    	SELECT country, coalesce(gold,0) as gold, coalesce(silver,0) as silver, coalesce(bronze,0) as bronze
    		FROM CROSSTAB('SELECT nr.region as country
    					, medal, count(1) as total_medals
    					FROM OLYMPIC_HISTORY oh
    					JOIN OLYMPIC_HISTORY_NOC_REGIONS nr ON nr.noc=oh.noc
    					where medal <> ''NA''
    					GROUP BY nr.region,medal order BY nr.region,medal',
                    'values (''Bronze''), (''Gold''), (''Silver'')')
    		AS FINAL_RESULT(country varchar,
    		bronze bigint, gold bigint, silver bigint)) x
    WHERE gold = 0 AND (silver > 0 OR bronze > 0)
    ORDER BY gold DESC nulls last, silver DESC nulls last, bronze DESC nulls last;

19. In which Sport/event, India has won highest medals.

with t1 as
        	(SELECT sport, count(1) as total_medals
        	FROM olympics_history
        	WHERE medal <> 'NA'
        	AND team = 'India'
        	GROUP BY sport
        	ORDER BY total_medals DESC),
        t2 as
        	(SELECT *, rank() over(ORDER BY total_medals DESC) as rnk
        	FROM t1)
    SELECT sport, total_medals
    FROM t2
    WHERE rnk = 1;
	
20. Break down all olympic games where India won medal for Hockey and how many medals in each olympic games

SELECT team, sport, games, count(1) as total_medals
    FROM olympic_history
    WHERE medal <> 'NA'
    AND team = 'India' AND sport = 'Hockey'
    GROUP BY team, sport, games
    ORDER BY total_medals DESC;
